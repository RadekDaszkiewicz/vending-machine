package pl.edu.pjatk.tau.labone.repository;

import org.springframework.stereotype.Component;
import pl.edu.pjatk.tau.labone.domain.Product;

import java.sql.*;
import java.util.List;

@Component
public class ProductRepositoryImpl implements ProductRepository {

    private Connection connection;
    private PreparedStatement addProductStmt;
    private PreparedStatement getAllProductsStmt;
    private PreparedStatement deleteProductStmt;
    private PreparedStatement getProductStmt;
    private PreparedStatement updateProductStmt;
    private PreparedStatement deleteAllProductsStmt;

    ProductRepositoryImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            createTables();
        }
        setConnection(connection);
    }

    @Override
    public Connection getConnection() {
        return this.connection;
    }

    @Override
    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addProductStmt = connection.prepareStatement("INSERT INTO Product (name, price) VALUES (?, ?)", Statement.RETURN_GENERATED_KEYS);
        deleteProductStmt = connection.prepareStatement("DELETE FROM Product where id = ?");
        deleteAllProductsStmt = connection.prepareStatement("DELETE FROM Product");
        getAllProductsStmt = connection.prepareStatement("SELECT id, name, price FROM Product ORDER BY id");
        getProductStmt = connection.prepareStatement("SELECT id, name, price FROM Product WHERE id = ?");
        updateProductStmt = connection.prepareStatement("UPDATE Product SET name=?,price=? WHERE id = ?");
    }

    public void createTables() throws SQLException {
        connection.createStatement().executeUpdate("CREATE TABLE Product(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(255) NOT NULL, price double)");
    }

    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Product".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public int addProduct(Product p) {
        return 0;
    }

    @Override
    public int deleteProduct(Product p) {
        return 0;
    }

    @Override
    public int updateProduct(Product p) throws SQLException {
        return 0;
    }

    @Override
    public Product getProduct(int id) throws SQLException {
        return null;
    }

    @Override
    public int deleteAll() {
        return 0;
    }

    @Override
    public List<Product> getAll() {
        return null;
    }
}
