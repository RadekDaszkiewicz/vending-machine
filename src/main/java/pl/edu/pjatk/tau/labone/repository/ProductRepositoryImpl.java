package pl.edu.pjatk.tau.labone.repository;

import org.springframework.stereotype.Component;
import pl.edu.pjatk.tau.labone.domain.Product;
import pl.edu.pjatk.tau.labone.service.DateService;

import javax.sql.DataSource;
import java.sql.*;
import java.util.LinkedList;
import java.util.List;

@Component
public class ProductRepositoryImpl implements ProductRepository {

//    private final DataSource dataSource;
//    private final DateService dateService;
    private Connection connection;
    private PreparedStatement addProductStmt;
    private PreparedStatement getAllProductsStmt;
    private PreparedStatement deleteProductStmt;
    private PreparedStatement getProductStmt;
    private PreparedStatement updateProductStmt;
    private PreparedStatement deleteAllProductsStmt;

//    public ProductRepositoryImpl(DataSource dataSource, DateService dateService) throws SQLException {
//        this.dataSource = dataSource;
//        this.dateService = dateService;
//        if (!isDatabaseReady()) {
//            createTables();
//        }
//        this.setConnection(this.dataSource.getConnection());
//      }
    public ProductRepositoryImpl(Connection connection) throws SQLException {
        this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
        if (!isDatabaseReady()) {
            createTables();
        }
        this.setConnection(this.connection);
    }

    @Override
    public Connection getConnection() {
        return this.connection;
    }

    @Override
    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addProductStmt = connection.prepareStatement("INSERT INTO Product (name, price) VALUES (?, ?)", Statement.RETURN_GENERATED_KEYS);
        deleteProductStmt = connection.prepareStatement("DELETE FROM Product where id = ?");
        deleteAllProductsStmt = connection.prepareStatement("DELETE FROM Product");
        getAllProductsStmt = connection.prepareStatement("SELECT id, name, price FROM Product ORDER BY id");
        getProductStmt = connection.prepareStatement("SELECT id, name, price FROM Product WHERE id = ?");
        updateProductStmt = connection.prepareStatement("UPDATE Product SET name=?,price=? WHERE id = ?");
    }

    public void createTables() throws SQLException {
        connection.createStatement().executeUpdate("CREATE TABLE Product(id int GENERATED BY DEFAULT AS IDENTITY, name varchar(255) NOT NULL, price double)");
    }

    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Product".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public int addProduct(Product p) {
        int count = 0;
        try {
            addProductStmt.setString(1, p.getName());
            addProductStmt.setBigDecimal(2, p.getPrice());
            count = addProductStmt.executeUpdate();
            ResultSet generatedKeys = addProductStmt.getGeneratedKeys();
            if (generatedKeys.next()) {
                p.setId(generatedKeys.getInt(1));
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    @Override
    public int deleteProduct(Product p) {
        try {
            deleteProductStmt.setInt(1, p.getId());
            return deleteProductStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }

    @Override
    public int updateProduct(Product p) throws SQLException {
        int count = 0;
        try {
            updateProductStmt.setString(1, p.getName());
            updateProductStmt.setBigDecimal(2, p.getPrice());
            updateProductStmt.setInt(3, p.getId());
            count = updateProductStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        if (count <= 0)
            throw new SQLException("Product not found for update");
        return count;
    }

    @Override
    public Product getProduct(int id) throws SQLException {
        try {
            getProductStmt.setInt(1, id);
            ResultSet rs = getProductStmt.executeQuery();
            if(rs.next()) {
                Product p = new Product();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setPrice(rs.getBigDecimal("price"));
            }
        } catch (SQLException e) {
            throw new IllegalStateException((e.getMessage() + "\n" + e.getStackTrace().toString()));
        }
        throw new SQLException("Product with id " + id + " does not exist");
    }

    @Override
    public int deleteAll() {
        try {
            return deleteAllProductsStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }

    @Override
    public List<Product> getAll() {
        List<Product> products = new LinkedList<>();
        try {
            ResultSet rs = getAllProductsStmt.executeQuery();
            while (rs.next()) {
                Product p = new Product();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setPrice(rs.getBigDecimal("price"));
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return products;
    }
}
